#################### PATH ####################

#$ /var/lib/docker

#################### IMAGE & CONTAINER MANAGEMENT ####################

docker version
docker pull <imageName>
docker ps -a
docker images
docker images -f reference="*some*regex*"                                       # list images with matching regex
docker rmi <imageName:tag>

docker start <containerName or ID>
docker exec <containerName or ID> <command> 					# running container
docker stop <containerName or ID>
docker rm <containerName or ID>

#################### CONTAINER RUN ####################

docker run --name <containerName> 
                  <imageName:tag> 
                  <params>
docker -d run --name <containerName> 
                     <imageName:tag> <params> 
                     <appendCommands>                                           # dettached
docker attach <containerName or ID>                                             # reattach
docker run -i <imageName:tag>                                                   # interactive mode
docker run -it <imageName:tag>                                                  # interactive mode with terminal
docker run -p <portHost:portContainer> 
              <imageName:tag>                                                   # routing requests --publish
docker run -e <envVariable:envValue> 
              <containerName or ID>                                             # passing in env values

docker run --link <linkImage:containerImage>

docker -H=remote-docker-engine:5000 run <imageName:tag>
docker run --cpus=.5 <imageName:tag>                                            # container will use a top of 50% of host cpu
docker run --memory=100m <imageName:tag>                                        # container wull use a top of 100MB of host RAM

#################### CONTAINER TOOLS ####################

docker inspect <containerName or ID>
docker logs <containerName or ID>
docker top <containerName or ID>

#################### IMAGE BUILD & REGISTRY ####################

docker build <pathWithDockerfile> -t <imageName>
docker history <imageName>

docker image tag <imageName> <tagName>                                          # yourDockerAccount/yourContainerName

docker login <accountName>
docker push <tagName> 						    	    	# yourDockerAccount/yourContainerName

#################### VOLUME & PERSISTENT DATA ####################

docker volume create <volumeName>                                               # creates a volume in /var/lib/docker/volumes/
docker run -v <pathHost:pathContainer> 
              <imageName:tag>                                                   # volume I/O mapping
docker run --mount type=bind,
                   source=<path/outside/docker/volumes>,
                   target=<path>

#################### NETWORKING ####################

docker run --network=<none/host>                                                # default is bridge
docker network create --driver <bridge/overlay> 
                      --subnet 182.18.0.0/16 
                      <networkName>
docker network create -o encrypted                                              # creates an overlay network spun over multiple host IPs encrypted
docker network ls
docker port <containerName or ID>

docker run -d -p <portHost:portContainer> --name <registryName> registry:2
docker <imageName> tag <tagName> <localhost or IP>:<portHost>/<tagName>
docker push <localhost or IP>:<portHost>/<tagName
docker pull <localhost or IP>:<portHost>/<tagName

docker service create --name <serviceName>
                      --replicas <number>
                      --network <networkName>
                      -e <envTweaks>
                      <imageName>
docker service ls                                                               
docker service ps <-serviceName>                                                # list tasks of given service
docker service scale <serviceName>=<number>                                     # scale up number of replicas

#################### SWARM ####################

docker swarm init                                                               # on swarm manager
docker swarm init --advertise-addr $(hostname -i)
docker swarm init --autolock                                                    # on swarm manager preventing access on restart
docker swarm update --autolock=true                                             # see above
docker swarm unlock                                                             # unlocking swarm info after service restart
docker node ls                                                                  # swarm node map
docker swarm join-token <manager/worker>
docker swarm join --token <mangerOrWorkerToken>                                 # on swarm workers or new managers
docker swarm join-token --rotate <manager/worker>                               # renew token

#################### SECRETS ####################

#- *nix => /run/secrets/<secretName>
#- win  => C:\ProgramData\Docker\Secrets

docker secret create <secretName> <fileSource>
docker secret ls
docker secret inspect <secretName>
docker service create --secret <secretName>
                      --replicas <number>

#################### STACK ####################
#- depends on SWARM and anyStackFile.yml version 3+

docker-compose -f <dockerComposeFile.yml> up									# docker-compose is the YAML fileName
docker-compose up -d --build                                                    # dettached, build images before starting containers - build key in compose file
docker-compose down                                                             # stop and remove services from the compose file
docker stack deploy -c <composeFile> <stackName>                                # or --compose-file
docker stack ls
docker stack services <stackName>

