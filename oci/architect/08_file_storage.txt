##### File Storage Intro

- Use Cases:
= Oracle Apps Lift and Shift
= General Purpose File System
= Big Data & Analytics
= HPC Scale Out Apps
= Test/Dev Databases
= Microservices Containers

- File Storage Service Features
= AD-local service, available in all OCI Regions and ADs
= Supports NFS v3
= Network Lock Management (NLM) for file locking
= Full POSIX semantics
= Data Protection => snapshot capabilities, 10k snapshots per file system
= Security => 128-bit, data-at-rest encryption for all filesystems and metadata
= Console management, APIs, CLI, data-path commands and Terraform
= Create 100 file systems and 2 mount targets per AD per account (soft limits)

- Mount Target
= AD-specific
= NFS endpoint that lives in your subnet of choice
= Has an IP address and DNS name to use in the mount command (e.g. 10.0.0.6)
= Requires 3 private IP addresses in the Subnet
=> don't use /30 or smaller to FSS
=> 2 IPs are used during the mount target and the 3rd is used to ensure High Availability
= Placing NFS clients and mount target in the same Subnet can result in IP conflicts
=> Users are not shown which private IPs are used for mount target
= Best practice => place FSS mount target in its own subnet where is can consume IPs as needed

- File System
= AD-specific
= Primary resources for storing files in FSS
= Access via creating a new mount target or using an existing one
= 100 File Systems per mount target
= Accessible from OCI BM and VM Instances
= Accessible from on-prems through FastConnect/VPN

- Export Path
= Makes a File System available through a mount target
= Unique path specified when a file system is associated with a mount target during creation
= No File Systems associated with the same mount target can have overlaping export paths
=> /example
=> /example/something/here
= Used along with the Mount Target IP to mount the File System to the Instance:
=> sudo mount 10.0.0.6:/example/something/here /mnt/mountpointA
=> sudo mount 10.0.0.6:/example/something/else /mnt/mountpointB

- Mounting an OCI File System
= Browse to OCI instance details in OCI Console
= Use NFSv3 protocol to mount the FSS volume
= ssh to OCI Instance
=> $ sudo yum install nfs-utils
=> $ sudo mkdir -p <targetDir>
=> $ sudo mount <mountPointIPAddr>:<export/path> <targetDir>

##### File Storage Demo

- Create a VCN 10.0.0.0/16
- Create a Private subnet 10.0.1.0/24 <privSubnet>
- Create a Public subnet 10.0.2.0/24 <pubSubnet>
- Create a Internet Gateway <IGW>
- Create a Route Table and add a Route Rule for type Internet Gateway to 0.0.0.0/0 using <IGW>
- Attach the <RT> to be used by <privSubnet>
- Create a Security List and attach it to be used by <privSubnet>
- Create a Mount Target using <privSubnet> in AD-1
- Create a File System in AD-1 selecting the <MT> created in last step
- Access the Private Security List and add the rules:
= Stateful Ingress TCP ports 111, 2048-2050
= Stateful Ingress UDP ports 111, 2048
= Stateful Egress TCP ports 111, 2048-2050 [need Egress with Stateful Ingress to ensure High Availability]
= Stateful Egress UDP ports 111 [need Egress with Stateful Ingress to ensure High Availability]
- Create 2 Compute Instances with Public IP in the <pubSubnet>
- ssh to both instances typing then:
= $ sudo yum install nfs-utils
= $ sudo mkdir -p /mtn/<filesystemName>
= $ sudo mount <mountPointIPAddr>:<export/path> /mtn/<filesystemName>
- create a file from Instance 1
- edit the file from Instance 2

##### File Storage Service Security

- Four distinct and separate layers of security with its own authorization entities and methods:
= IAM Service
=> Apply to: OCI users, policies
=> Create Instances (NFS clients) and SS VCNs. Create, list and associate filesystems and mount targets
= Security Lists and Network Security Groups
=> Apply to: CIDR blocks
=> Connecting the NFS client instance to the mount target
= Export Options
=> Apply to: Export Options, CIDR blocks
=> Apply access control per filesystem based on source IP CIDR blocks bridging SL layer and NFSv3 layer
= NFSv3 Unix Security
=> Apply to: Unix users
=> Mount filesystems, reading/writing files, file access security

- Security Lists
= Must configure Security List rules to allow traffic to the Mount Target subnet
=> Stateful Ingress TCP ports 111, 2048-2050
=> Stateful Ingress UDP ports 111, 2048
=> Stateful Egress TCP ports 111, 2048-2050 [need Egress with Stateful Ingress to ensure High Availability]
=> Stateful Egress UDP ports 111 [need Egress with Stateful Ingress to ensure High Availability]

- Export Option
= Security Lists is all or nothing approach: client can either access the mount target or not
= Using NSF in a multi-tenant environment can limit client's ability to connect to the filesystem
= Export controls how NFS clients access filesystems
= Info stored in an Export includes:
=> System OCID
=> Export Path
=> Client access options
= NFS Export Options are automatically created after Filesystem + Mount Target creation
=> Setting full access to all NFS clients:
> Source: 0.0.0.0/0 (All)
> Require Privileged Source Port: False
> Access: Read_Write
> Identity Squash: None

- Export Option Demo
= Client X on subnet 10.0.0.0/24 requires Read/Write to filesystem A but not B
= Client Y on subnet 10.0.1.0/24 requires Read/Write to filesystem B but not A
= Both Filesystems A and B are in 10.0.2.0/24
= Export Option on Export Path on Filesystem A:
=> $ oci fs export update --export-id <filesystemAexportID> \
                          --export-options '[{"source":"10.0.0.0/24", \
                                              "require-privileged-source-port":"true", \
                                              "access":"READ_WRITE", \
                                              "identity-squash":"NONE", \
                                              "anonymous-uid":"65534", \
                                              "anonymous-gid":"65534"}]'
=> $ oci fs export update --export-id <filesystemAexportID> \
                          --export-options '[{"source":"10.0.1.0/24", \
                                              "require-privileged-source-port":"true", \
                                              "access":"READ_ONLY", \
                                              "identity-squash":"NONE", \
                                              "anonymous-uid":"65534", \
                                              "anonymous-gid":"65534"}]'

##### File Storage Snapshots

- Provide a read-only, space efficient, point-in-time backup of a filesystem
- Created under the root folder of filesystem (/.snapshot)
- Can take up to 10k snapshots per filesystem (soft limit)
- Can restore a file within the snapshot or a n entire snapshot using cp or rsync
= cp -r .snapshot/snapshot_name/* /path/to/destination
- If nothing changed in the filesystem, the snapshot does not consume any additional storage
