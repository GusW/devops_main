##### Bare Metal, VM and Dedicated Hosts

- Bare Metal - Single Tenant Model => Metal Server
- Virtual Machine - Multi Tenant => Hypervisor to virtualize the underlying Bare Metal server
- Dedicated VM Hosts => Single Tenant Model => VM on dedicated servers leveraging the extra work of BM
- VM compute instances runs on the same hardware as BM instances
= leverages the same cloud-optimized hardware, firmware, software stack and network infra

- Bare Metal Use Cases:
= Direct Hardware Access with Security, Capabilities, Elasticity and Scalability of OCI
= Workloads that are Performance-intensive
= Workloads that are not virtualized
= Workloads that require a specific hypervisor
= Workloads that require BYOL (Bring your Own Licensing)

- Use Cases for AMD EPYC Bare Metal based instances
= 64 Cores, 512 GB RAM, 2 x 25 GB/s bandwidth, 75 vNICs
= Available at $0.03 core/hour, 66% cheaper that other options
= Ideal for maximizing price performance
= Supported Oracle apps (E-Business suite, JD Edwards, PeopleSoft)
= Certified to run Cloudera, Hortonworks, MapR, Transwarp
= On 10-TB full TeraSort benchmark => 40% cost reduction per OCPU vs. x86 alternatives

##### Compute Demo

- ssh-keygen
- Create a VM instance picking a VCN and a public Subnet pasting in the ssh public key
- Create a VM instance in a Dedicated Host picking a VCN and a public Subnet pasting in the ssh public key
- Create a BM instance picking a VCN and a public Subnet pasting in the ssh public key

##### Images

- Oracle provided Images
= A template of virtual hard drive that determines the OS and other software for an instance
= Can be Oracle-provided, Custom or BYOI (Bring your own image)
= Oracle provides several pre-built images for Oracle Linux, Microsoft Windows, Ubuntu and CentOS

- Linux Images
= username opc for Oracle/CentOS images
= username ubuntu for Ubuntu images
= users are sudoers an are configured to remote access over SSH v2
= default set of firewall rules allow only SSH access (port 22)
= optionally can provide a startup script using cloud-init

- Windows Images
= username opc created with an One Time Password (OTP)
= Include Windows Update utility

- Custom Images
= Create a custom image of an instance boot disk and use it to launch other instances
= Include customizations, configuration and software installed when the image was created
= During the process, instance shuts down for several minutes - afterwards it restarts and completes the process
= Do not include the data from any attached block volumes
= cannot exceed 300GB
= Windows custom images cannot be exported or downloaded out of the tenancy

- Image Import/Export
= Compute service lets you share custom images across regions and tenancies using Import/Export capability
= Uses OCI Object Storage service
= Can Import Linux and Windows OS
= Emulation Mode:
=> Virtual Machines I/O devices (disk, network), CPU, memory via software
=> Emulated VM can support almost any x86 OS
=> SLOW VMs
= Paravirtualized:
=> Includes a driver specifically designed to enable virtualization
= Native Mode:
=> Hardware Virtualized Machines
=> Max peformance with modern OSes

- BYOI Bring you own Image
= Bring your own version of OSes to the cloud as long as the underlying hardware supports it
= Enables lift-and-shift cloud migration projects
= Supports both old and new OS
= Encourages experimentation
= Increases infrastructure flexibility
= Workflow:
=> On-prem with the OS
=> Convert that OS into a image (qcow2 file)
=> Store that in the Object Storage or install that in a Compute Instance
= Must comply with all the licensing requirements when upload and start instances based on supplied OS images

##### Images Demo

- Select a running compute instance in the list and see its details
- Click in Actions and select Create Custom Image
- Select a Comparment and Name
- After creation process is done access the Compute >> Custom Images menu
- Click the context menu and select Export Image
- Pick Object Storage, a Comparment and a Bucket Name
- After exporting the image it is possile to access that Bucket and retrieve the URL to be used while creating instances

##### Boot Volumes

- A Compute instance is launched using OS image stored on a remote boot volume
- Created automatically and associated with an instance (for the instance lifespan)
- Are encrypted, have faster performance, lower launch times, and higher durability for BM and VM instances
- Can be preserved after the termination of the instance
- Are only terminated when manually deleted
- Cannot be detached from a running instance
- Maintenance:
= Manual backup
= Backup policy
= Create clone of boot volumes
- Custom Boot Volumes
= Option to specify a custom boot volume size
= Must extend first the root (linux) or system (Windows) partition
= Default in Linux is 46.6GB
= Default in Windows is 256GB
= Can go to 32TB

- Custom Images:
= Pros => Can export across regions and tenancies
= Pros => No cost associated to store custom images
= Cons => Instance shuts down and remains unavailable for minutes unitl process is done
= Cons => Limit of 25 custom images per compartment

- Boot Volume Backups
= Pros => Doesn't require downtime
= Pros => Preserve the entire state of the running OS
= Cons => Cost associated with the amount of Object Storage used
= Cons => Creating a boot volume backup with Instance running creates a crash-consistent backup

##### Boot Volumes Backups

- Access Coumpute >> Boot Volumes
- Pick a running boot volume
- Click Boot Volume Backups and click create a backup
- Type in a name
- Can choose between a full backup or an incremental one
- Create full backup
- Click Boot Volume Clones and create a clone
- Type in a name
- Click create clone
= Will notice action cannot be performed once the backup action is not fully done

##### Instance Configuration, Pools and Autoscaling

- Instance Configuration and Pool
= Get a config file out of a running Instance with
=> OS Image, metadata, shape
=> vNICs, storage, subnets
= Use this config file as a template to spin up multiple instances
=> in different Availability Domains
=> Orchestration: manage them altogheter (start, stop, terminate)
=> Attach to a Load Balancer

- Instance Configuration Use Cases:
= Clone an instance and save to a configuration file
= Create standardized baseline instance templates
= Easily deploy instances from CLI wit single config file
= Automate the provisioning of many instances, their resources and handle attachments

- Instance Pools Use Cases:
= Centrally manage a group of instance workloads that are all configured with a consistent configuration
= Update a large number of instances with a single instance configuration change
= Keep high availability and distribute instances across ADs within a Region
= Scale out instances on-demand by increasing the instance size of the pool

- Autoscaling Configurations
= Enables to automatically adjust the number of running Compute instances in an Instance pool
= Scale trigger based on performance metrics => CPU/Memory utilization
= When Instance Pool scales in:
=> Number of instances is balanced across Availability Domains and then balanced across Fault Domains
=> Within a Fault Domain  the oldest instance is terminated first

##### Autoscaling Demo

- Create a new Compute Instance 'autoscaling_inst' with Public IP addr and pasting in the SSH keys
- As an advanced option, paste in a startup script:
=> #!/bin/bash
=> sudo yum install stress -y
=> sudo stress --cpu 20 --timeout 420 &
- On 'autoscaling_inst' details page click on Create Instance Configuration from Instance
- Type in a name and click create
- Access Compute >> Instance Pools
- Create a new Instance pool
- Select an initial number of instances => 1
- Select the Instance configuration => created from 'autoscaling_inst'
- Select Comparment and VCN accordingly and click create
- Access Compute >> Autoscaling Configurations
- Click create Autoscaling Configuration
- Type in a name
- Chose a Cooldown period => amount of time OCI won't take actions on scaling in/out
- Pick the created Instance Pool
- In Autoscaling Policy chose CPU Utilization performance metric
- Minimum Instance = 1
- Maximum Instances = 3
- Initial Number = 1
- Scaling Rule:
= Scale-Out Operator => Greater Than (>)
= Threshold Perc => 50
= Number of Instances to add => 1
= Scale-In Operator => Less Than (<)
= Threshold Perc => 40
= Number of Instances to remove => 1
- Click Create

##### Instance Metadata and LifeCycle

- Instance metadata includes:
= OCID
= name
= compartment
= shape
= region
= AD
= creation date
= state
= image
= custom metadata => SSH public key
- service runs on every instance
- HTTP endpoint on 169.254.169.254
- Get instance metadata by logging into the instance and using the metadata service
- Oracle provided Linux instances
= curl http://169.254.169.254/opc/v1/instance
= curl http://169.254.169.254/opc/v1/instance/metadata
= curl http://169.254.169.254/opc/v1/instance/metadata/<keyName>/
- Add and update custom metadata using CLI or SDK

- Instance LifeCycle
= Start => Restarts a stopped instance. After the instance is restarted, Stop action is enabled
= Stop => Shuts down a running instance. After the instance is powered off, Start action is enabled
= Reboot => Shuts down and then restarts the instance
= Terminate => Permanentely delete instances
=> Instance Public and Private IP addr are released and become available for other instances
=> You can preserve the boot volume and attach it to a different instance as boot volume or data volume
! One way of troubleshooting a failing Boot Volume is to attach it as a data volume in another Instance
= Resource Billing
=> Standard Shapes ~> Billing pauses while in STOP state
=> Dense I/O Shapes ~> Billing continues while in STOP state
=> GPU Shapes ~> Billing continues while in STOP state
=> HPC Shapes ~> Billing continues while in STOP state


##### Instance Metadata Demo

- SSH into a Oracle based Instance
- $ curl http://169.254.169.254/opc/v1/instance
